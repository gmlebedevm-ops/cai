import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–æ–≤—ã–µ —Ä–æ–ª–∏
    const users = await prisma.user.findMany()
    const roles = await prisma.role.findMany()

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${roles.length} —Ä–æ–ª–µ–π`)

    // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö —Ä–æ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã–µ
    const roleMapping: Record<string, string> = {
      'INITIATOR': '–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä',
      'INITIATOR_MANAGER': '–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–≤',
      'DEPARTMENT_HEAD': '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞',
      'CHIEF_LAWYER': '–ì–ª–∞–≤–Ω—ã–π —é—Ä–∏—Å—Ç',
      'GENERAL_DIRECTOR': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      'OFFICE_MANAGER': '–û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä',
      'ADMINISTRATOR': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }

    let updatedCount = 0

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      const newRoleName = roleMapping[user.role]
      
      if (newRoleName) {
        const newRole = roles.find(role => role.name === newRoleName)
        
        if (newRole) {
          await prisma.user.update({
            where: { id: user.id },
            data: { roleId: newRole.id }
          })
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} (${user.role}) -> ${newRoleName} (ID: ${newRole.id})`)
          updatedCount++
        } else {
          console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å "${newRoleName}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`)
        }
      } else {
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å "${user.role}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`)
      }
    }

    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const updatedUsers = await prisma.user.findMany({
      include: {
        userRole: {
          select: {
            name: true,
            description: true
          }
        }
      }
    })

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    updatedUsers.forEach(user => {
      console.log(`- ${user.email}: ${user.role} -> ${user.userRole?.name || '–ë–µ–∑ —Ä–æ–ª–∏'}`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    throw error
  }
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })