'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { 
  Settings, 
  Bot, 
  Server, 
  Key, 
  CheckCircle, 
  XCircle, 
  RefreshCw,
  Save,
  TestTube,
  Database,
  Sliders,
  Activity,
  Copy,
  Eye,
  EyeOff,
  Zap,
  Info,
  AlertTriangle,
  BarChart3,
  Play,
  Pause,
  Download,
  Upload,
  Filter,
  Search,
  X,
  Cpu,
  HardDrive,
  Clock,
  Star,
  FileText
} from 'lucide-react'

interface AISettings {
  id: string
  lmStudioUrl: string
  apiKey: string
  defaultModel: string
  temperature: number
  maxTokens: number
  topP: number
  isActive: boolean
  updatedAt: string
}

interface ModelInfo {
  id: string
  object: string
  created: number
  owned_by: string
  size?: string
  format?: string
  family?: string
  quantization?: string
  context_length?: number
  description?: string
  parameters?: {
    temperature: number
    max_tokens: number
    top_p: number
  }
  performance?: {
    avg_response_time: number
    success_rate: number
    last_used: string
  }
  is_favorite?: boolean
  is_tested?: boolean
  test_result?: {
    success: boolean
    response_time: number
    quality_score: number
    notes: string
  }
}

interface TestResult {
  success: boolean
  message: string
  models?: ModelInfo[]
  modelCount?: number
  error?: string
}

export default function AISettingsPage() {
  const [settings, setSettings] = useState<AISettings | null>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [testing, setTesting] = useState(false)
  const [testResult, setTestResult] = useState<TestResult | null>(null)
  const [availableModels, setAvailableModels] = useState<ModelInfo[]>([])
  const [showApiKey, setShowApiKey] = useState(false)
  const [activeTab, setActiveTab] = useState('connection')
  const [modelSearch, setModelSearch] = useState('')
  const [selectedModel, setSelectedModel] = useState<ModelInfo | null>(null)
  const [testingModel, setTestingModel] = useState<string | null>(null)
  const [modelProfiles, setModelProfiles] = useState([
    {
      id: 'legal',
      name: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤',
      temperature: 0.2,
      maxTokens: 1800,
      topP: 0.85,
      icon: '‚öñÔ∏è'
    },
    {
      id: 'creative',
      name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      description: '–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
      temperature: 0.7,
      maxTokens: 2500,
      topP: 0.95,
      icon: 'üé®'
    },
    {
      id: 'analytical',
      name: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
      description: '–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
      temperature: 0.1,
      maxTokens: 2000,
      topP: 0.8,
      icon: 'üìä'
    }
  ])
  const [performanceStats, setPerformanceStats] = useState({
    totalRequests: 0,
    avgResponseTime: 0,
    successRate: 100,
    last24hRequests: 0
  })
  const [cacheInfo, setCacheInfo] = useState({
    isCached: false,
    lastUpdated: null as Date | null
  })
  const [notifications, setNotifications] = useState<{
    modelIssues: string[]
    performanceWarnings: string[]
    systemAlerts: string[]
  }>({
    modelIssues: [],
    performanceWarnings: [],
    systemAlerts: []
  })

  useEffect(() => {
    fetchSettings()
    fetchPerformanceStats()
  }, [])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    checkModelIssues()
  }, [availableModels, performanceStats, settings])

  const fetchSettings = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/ai-settings')
      if (response.ok) {
        const data = await response.json()
        setSettings(data)
      }
    } catch (error) {
      console.error('Error fetching AI settings:', error)
    } finally {
      setLoading(false)
    }
  }

  const saveSettings = async () => {
    if (!settings) return

    try {
      setSaving(true)
      const response = await fetch('/api/ai-settings', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settings)
      })

      if (response.ok) {
        const data = await response.json()
        setSettings(data)
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
      } else {
        const error = await response.json()
        alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.error}`)
      }
    } catch (error) {
      console.error('Error saving AI settings:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫')
    } finally {
      setSaving(false)
    }
  }

  const testConnection = async () => {
    if (!settings) return

    try {
      setTesting(true)
      const response = await fetch('/api/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'test_connection' })
      })

      const result: TestResult = await response.json()
      setTestResult(result)
    } catch (error) {
      console.error('Error testing connection:', error)
      setTestResult({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        error: error instanceof Error ? error.message : 'Unknown error'
      })
    } finally {
      setTesting(false)
    }
  }

  const fetchAvailableModels = async () => {
    if (!settings) return

    try {
      const response = await fetch('/api/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'get_models' })
      })

      const result = await response.json()
      if (result.success) {
        setAvailableModels(result.models)
        setCacheInfo({
          isCached: result.cached || false,
          lastUpdated: result.cached ? new Date() : null
        })
      }
    } catch (error) {
      console.error('Error fetching models:', error)
    }
  }

  const fetchPerformanceStats = async () => {
    try {
      const response = await fetch('/api/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'get_performance_stats' })
      })

      const result = await response.json()
      if (result.success) {
        setPerformanceStats({
          totalRequests: result.stats.totalRequests,
          avgResponseTime: result.stats.avgResponseTime,
          successRate: result.stats.successRate,
          last24hRequests: result.stats.requestsLast24h
        })
      }
    } catch (error) {
      console.error('Error fetching performance stats:', error)
    }
  }

  const clearModelCache = async () => {
    try {
      const response = await fetch('/api/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'clear_cache' })
      })

      const result = await response.json()
      if (result.success) {
        setCacheInfo({ isCached: false, lastUpdated: null })
        alert('–ö—ç—à –º–æ–¥–µ–ª–µ–π –æ—á–∏—â–µ–Ω')
      }
    } catch (error) {
      console.error('Error clearing cache:', error)
    }
  }

  const checkModelIssues = () => {
    const issues: string[] = []
    const warnings: string[] = []
    const alerts: string[] = []

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–æ–¥–µ–ª—è–º–∏
    const failedModels = availableModels.filter(model => 
      model.is_tested && model.test_result && !model.test_result.success
    )
    
    if (failedModels.length > 0) {
      issues.push(`${failedModels.length} –º–æ–¥–µ–ª–µ–π –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ`)
    }

    const slowModels = availableModels.filter(model => 
      model.test_result && model.test_result.response_time > 5000
    )
    
    if (slowModels.length > 0) {
      warnings.push(`${slowModels.length} –º–æ–¥–µ–ª–µ–π –∏–º–µ—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (performanceStats.successRate < 90 && performanceStats.totalRequests > 10) {
      warnings.push('–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (< 90%)')
    }

    if (performanceStats.avgResponseTime > 3000 && performanceStats.totalRequests > 0) {
      warnings.push('–í—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (> 3—Å)')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    if (!settings?.isActive) {
      alerts.push('AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
    }

    if (availableModels.length === 0) {
      alerts.push('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio.')
    }

    setNotifications({
      modelIssues: issues,
      performanceWarnings: warnings,
      systemAlerts: alerts
    })
  }

  const handleInputChange = (field: keyof AISettings, value: any) => {
    if (settings) {
      setSettings(prev => prev ? { ...prev, [field]: value } : null)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
  }

  const testModel = async (modelId: string) => {
    setTestingModel(modelId)
    try {
      const response = await fetch('/api/ai-settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          action: 'test_model',
          modelId,
          testPrompt: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫—Ä–∞—Ç–∫–æ.'
        })
      })

      const result = await response.json()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
      setAvailableModels(prev => prev.map(model => 
        model.id === modelId 
          ? { 
              ...model, 
              is_tested: true,
              test_result: {
                success: result.success,
                response_time: result.response_time || 0,
                quality_score: result.quality_score || 0,
                notes: result.message || ''
              }
            }
          : model
      ))

      alert(result.success ? '–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ' : '–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è')
    } catch (error) {
      console.error('Error testing model:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏')
    } finally {
      setTestingModel(null)
    }
  }

  const toggleFavoriteModel = (modelId: string) => {
    setAvailableModels(prev => prev.map(model => 
      model.id === modelId 
        ? { ...model, is_favorite: !model.is_favorite }
        : model
    ))
  }

  const applyModelProfile = (profileId: string) => {
    const profile = modelProfiles.find(p => p.id === profileId)
    if (profile && settings) {
      setSettings(prev => prev ? {
        ...prev,
        temperature: profile.temperature,
        maxTokens: profile.maxTokens,
        topP: profile.topP
      } : null)
    }
  }

  const filteredModels = availableModels.filter(model =>
    model.id.toLowerCase().includes(modelSearch.toLowerCase()) ||
    model.owned_by.toLowerCase().includes(modelSearch.toLowerCase())
  )

  const favoriteModels = filteredModels.filter(model => model.is_favorite)
  const otherModels = filteredModels.filter(model => !model.is_favorite)

  const renderModelCard = (model: ModelInfo) => (
    <div
      key={model.id}
      className={`p-4 border rounded-lg space-y-3 ${
        settings?.defaultModel === model.id ? 'ring-2 ring-primary' : ''
      }`}
    >
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-1">
            <h4 className="font-medium">{model.id}</h4>
            {model.is_favorite && (
              <Zap className="h-4 w-4 text-yellow-500" />
            )}
            {model.is_tested && (
              <Badge variant={model.test_result?.success ? 'default' : 'destructive'} className="text-xs">
                {model.test_result?.success ? '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' : '–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω'}
              </Badge>
            )}
            {settings?.defaultModel === model.id && (
              <Badge variant="default" className="text-xs">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</Badge>
            )}
          </div>
          <div className="text-sm text-muted-foreground space-y-1">
            <div>–ê–≤—Ç–æ—Ä: {model.owned_by}</div>
            <div className="flex items-center gap-4">
              <span>–°–æ–∑–¥–∞–Ω: {new Date(model.created * 1000).toLocaleDateString()}</span>
              {model.size && <span>–†–∞–∑–º–µ—Ä: {model.size}</span>}
              {model.format && <span>–§–æ—Ä–º–∞—Ç: {model.format}</span>}
            </div>
            {model.description && (
              <p className="text-xs mt-2">{model.description}</p>
            )}
          </div>
        </div>
        <div className="flex items-center gap-1">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => toggleFavoriteModel(model.id)}
          >
            {model.is_favorite ? <Zap className="h-4 w-4 text-yellow-500" /> : <Zap className="h-4 w-4" />}
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => copyToClipboard(model.id)}
          >
            <Copy className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setSelectedModel(model)}
          >
            <Info className="h-4 w-4" />
          </Button>
        </div>
      </div>

      <div className="flex items-center justify-between pt-2 border-t">
        <div className="flex items-center gap-2">
          {model.test_result && (
            <div className="text-xs text-muted-foreground">
              –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {model.test_result.response_time}ms ‚Ä¢ 
              –ö–∞—á–µ—Å—Ç–≤–æ: {model.test_result.quality_score}/10
            </div>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleInputChange('defaultModel', model.id)}
            disabled={settings?.defaultModel === model.id}
          >
            {settings?.defaultModel === model.id ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–í—ã–±—Ä–∞—Ç—å'}
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => testModel(model.id)}
            disabled={testingModel === model.id}
          >
            {testingModel === model.id ? (
              <RefreshCw className="h-4 w-4 animate-spin" />
            ) : (
              <TestTube className="h-4 w-4" />
            )}
            {testingModel === model.id ? '–¢–µ—Å—Ç...' : '–¢–µ—Å—Ç'}
          </Button>
        </div>
      </div>
    </div>
  )

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI...</p>
        </div>
      </div>
    )
  }

  if (!settings) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <Settings className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <p className="text-muted-foreground">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI</h1>
          <p className="text-muted-foreground">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–æ–¥–µ–ª—è–º–∏ LM Studio
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={fetchSettings} disabled={loading}>
            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button onClick={saveSettings} disabled={saving}>
            <Save className="h-4 w-4 mr-2" />
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        </div>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö */}
      {(notifications.modelIssues.length > 0 || notifications.performanceWarnings.length > 0 || notifications.systemAlerts.length > 0) && (
        <div className="space-y-3">
          {notifications.systemAlerts.map((alert, index) => (
            <Alert key={`alert-${index}`} className="border-red-200 bg-red-50">
              <XCircle className="h-4 w-4 text-red-600" />
              <AlertDescription className="text-red-800">
                <strong>–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</strong> {alert}
              </AlertDescription>
            </Alert>
          ))}
          
          {notifications.modelIssues.map((issue, index) => (
            <Alert key={`issue-${index}`} className="border-orange-200 bg-orange-50">
              <AlertTriangle className="h-4 w-4 text-orange-600" />
              <AlertDescription className="text-orange-800">
                <strong>–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—è–º–∏:</strong> {issue}
              </AlertDescription>
            </Alert>
          ))}
          
          {notifications.performanceWarnings.map((warning, index) => (
            <Alert key={`warning-${index}`} className="border-yellow-200 bg-yellow-50">
              <AlertTriangle className="h-4 w-4 text-yellow-600" />
              <AlertDescription className="text-yellow-800">
                <strong>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</strong> {warning}
              </AlertDescription>
            </Alert>
          ))}
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="h-5 w-5" />
            –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center gap-2">
              {settings.isActive ? (
                <>
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="text-green-600">AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω</span>
                </>
              ) : (
                <>
                  <XCircle className="h-4 w-4 text-red-500" />
                  <span className="text-red-600">AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω</span>
                </>
              )}
            </div>
            <div className="flex items-center gap-2">
              <Server className="h-4 w-4 text-blue-500" />
              <span>LM Studio: {settings.lmStudioUrl}</span>
            </div>
            <div className="flex items-center gap-2">
              <Bot className="h-4 w-4 text-purple-500" />
              <span>–ú–æ–¥–µ–ª—å: {settings.defaultModel}</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="connection">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</TabsTrigger>
          <TabsTrigger value="models">–ú–æ–¥–µ–ª–∏</TabsTrigger>
          <TabsTrigger value="profiles">–ü—Ä–æ—Ñ–∏–ª–∏</TabsTrigger>
          <TabsTrigger value="parameters">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</TabsTrigger>
        </TabsList>

        {/* –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <TabsContent value="connection" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Server className="h-5 w-5" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="lmStudioUrl">URL LM Studio</Label>
                  <Input
                    id="lmStudioUrl"
                    value={settings.lmStudioUrl}
                    onChange={(e) => handleInputChange('lmStudioUrl', e.target.value)}
                    placeholder="http://localhost:1234"
                  />
                  <p className="text-xs text-muted-foreground">
                    –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ LM Studio (–æ–±—ã—á–Ω–æ http://localhost:1234)
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="apiKey">API –∫–ª—é—á</Label>
                  <div className="relative">
                    <Input
                      id="apiKey"
                      type={showApiKey ? 'text' : 'password'}
                      value={settings.apiKey}
                      onChange={(e) => handleInputChange('apiKey', e.target.value)}
                      placeholder="your-api-key"
                    />
                    <Button
                      variant="ghost"
                      size="sm"
                      className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0"
                      onClick={() => setShowApiKey(!showApiKey)}
                    >
                      {showApiKey ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    –ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API LM Studio
                  </p>
                </div>
              </div>

              <div className="flex items-center justify-between p-4 border rounded-lg">
                <div className="flex items-center gap-2">
                  <Switch
                    checked={settings.isActive}
                    onCheckedChange={(checked) => handleInputChange('isActive', checked)}
                  />
                  <Label>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</Label>
                </div>
                <Badge variant={settings.isActive ? 'default' : 'secondary'}>
                  {settings.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                </Badge>
              </div>

              {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h4 className="text-sm font-medium">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h4>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      onClick={testConnection}
                      disabled={testing || !settings.isActive}
                    >
                      <TestTube className="h-4 w-4 mr-2" />
                      {testing ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
                    </Button>
                    <Button
                      variant="outline"
                      onClick={fetchAvailableModels}
                      disabled={testing || !settings.isActive}
                    >
                      <Database className="h-4 w-4 mr-2" />
                      –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏
                    </Button>
                  </div>
                </div>

                {testResult && (
                  <Alert className={testResult.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>
                    {testResult.success ? (
                      <CheckCircle className="h-4 w-4 text-green-600" />
                    ) : (
                      <XCircle className="h-4 w-4 text-red-600" />
                    )}
                    <AlertDescription className={testResult.success ? 'text-green-800' : 'text-red-800'}>
                      <div className="space-y-2">
                        <p>{testResult.message}</p>
                        {testResult.models && (
                          <p className="text-sm">
                            –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {testResult.modelCount}
                          </p>
                        )}
                        {testResult.error && (
                          <p className="text-sm font-mono bg-red-100 p-2 rounded">
                            {testResult.error}
                          </p>
                        )}
                      </div>
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* –í–∫–ª–∞–¥–∫–∞ –º–æ–¥–µ–ª–µ–π */}
        <TabsContent value="models" className="space-y-4">
          <div className="grid gap-6">
            {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <Card>
              <CardContent className="pt-6">
                <div className="flex flex-col sm:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π..."
                      value={modelSearch}
                      onChange={(e) => setModelSearch(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      onClick={fetchAvailableModels}
                      disabled={testing || !settings?.isActive}
                    >
                      <RefreshCw className={`h-4 w-4 mr-2 ${testing ? 'animate-spin' : ''}`} />
                      –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
                    </Button>
                    {cacheInfo.isCached && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={clearModelCache}
                      >
                        <Database className="h-4 w-4 mr-2" />
                        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
                      </Button>
                    )}
                  </div>
                </div>
                {cacheInfo.isCached && (
                  <div className="mt-2 text-xs text-muted-foreground">
                    –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {cacheInfo.lastUpdated?.toLocaleTimeString()}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bot className="h-5 w-5" />
                  –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Select 
                  value={settings?.defaultModel || ''} 
                  onValueChange={(value) => handleInputChange('defaultModel', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" />
                  </SelectTrigger>
                  <SelectContent>
                    {favoriteModels.length > 0 && (
                      <>
                        <div className="px-2 py-1 text-sm font-semibold text-muted-foreground">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ</div>
                        {favoriteModels.map((model) => (
                          <SelectItem key={model.id} value={model.id}>
                            <div className="flex flex-col">
                              <span className="font-medium">{model.id}</span>
                              <span className="text-xs text-muted-foreground">
                                {model.owned_by} ‚Ä¢ {model.size && `${model.size} ‚Ä¢ `}{new Date(model.created * 1000).toLocaleDateString()}
                              </span>
                            </div>
                          </SelectItem>
                        ))}
                      </>
                    )}
                    {otherModels.length > 0 && (
                      <>
                        <div className="px-2 py-1 text-sm font-semibold text-muted-foreground">–í—Å–µ –º–æ–¥–µ–ª–∏</div>
                        {otherModels.slice(0, 10).map((model) => (
                          <SelectItem key={model.id} value={model.id}>
                            <div className="flex flex-col">
                              <span className="font-medium">{model.id}</span>
                              <span className="text-xs text-muted-foreground">
                                {model.owned_by} ‚Ä¢ {model.size && `${model.size} ‚Ä¢ `}{new Date(model.created * 1000).toLocaleDateString()}
                              </span>
                            </div>
                          </SelectItem>
                        ))}
                      </>
                    )}
                  </SelectContent>
                </Select>
                <p className="text-xs text-muted-foreground">
                  –ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                </p>
              </CardContent>
            </Card>

            {/* –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏</h3>
              
              {favoriteModels.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-base">
                      <Zap className="h-4 w-4" />
                      –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {favoriteModels.map((model) => renderModelCard(model))}
                  </CardContent>
                </Card>
              )}

              {otherModels.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-base">
                      <Database className="h-4 w-4" />
                      –í—Å–µ –º–æ–¥–µ–ª–∏ ({otherModels.length})
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    {otherModels.map((model) => renderModelCard(model))}
                  </CardContent>
                </Card>
              )}

              {filteredModels.length === 0 && (
                <Alert>
                  <AlertDescription>
                    {modelSearch 
                      ? '–ú–æ–¥–µ–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
                      : '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ LM Studio.'
                    }
                  </AlertDescription>
                </Alert>
              )}
            </div>
          </div>
        </TabsContent>

        {/* –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π */}
        <TabsContent value="profiles" className="space-y-4">
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sliders className="h-5 w-5" />
                  –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                </CardTitle>
                <CardDescription>
                  –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid gap-4">
                  {modelProfiles.map((profile) => (
                    <Card key={profile.id} className="cursor-pointer transition-colors hover:bg-muted/50">
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start gap-3">
                            <div className="text-2xl">{profile.icon}</div>
                            <div className="flex-1">
                              <h4 className="font-medium mb-1">{profile.name}</h4>
                              <p className="text-sm text-muted-foreground mb-3">
                                {profile.description}
                              </p>
                              <div className="grid grid-cols-3 gap-4 text-xs">
                                <div>
                                  <span className="font-medium">Temperature:</span> {profile.temperature}
                                </div>
                                <div>
                                  <span className="font-medium">Max Tokens:</span> {profile.maxTokens}
                                </div>
                                <div>
                                  <span className="font-medium">Top P:</span> {profile.topP}
                                </div>
                              </div>
                            </div>
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => applyModelProfile(profile.id)}
                          >
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>

                <Separator />

                <div className="space-y-4">
                  <h4 className="text-sm font-medium">–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                  <div className="grid grid-cols-3 gap-4 p-4 bg-muted rounded-lg">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-primary">{settings?.temperature || 0}</div>
                      <div className="text-xs text-muted-foreground">Temperature</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-primary">{settings?.maxTokens || 0}</div>
                      <div className="text-xs text-muted-foreground">Max Tokens</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-primary">{settings?.topP || 0}</div>
                      <div className="text-xs text-muted-foreground">Top P</div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-primary">{performanceStats.totalRequests}</div>
                    <div className="text-xs text-muted-foreground">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-green-600">{performanceStats.avgResponseTime}ms</div>
                    <div className="text-xs text-muted-foreground">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-blue-600">{performanceStats.successRate}%</div>
                    <div className="text-xs text-muted-foreground">–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-purple-600">{performanceStats.last24hRequests}</div>
                    <div className="text-xs text-muted-foreground">–ó–∞ 24 —á–∞—Å–∞</div>
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <h4 className="text-sm font-medium">–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h4>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={fetchPerformanceStats}
                  >
                    <RefreshCw className="h-4 w-4 mr-2" />
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </Button>
                </div>

                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm">–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã</span>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-muted rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-green-500 transition-all duration-300"
                          style={{ width: `${performanceStats.successRate}%` }}
                        />
                      </div>
                      <span className="text-sm text-muted-foreground">{performanceStats.successRate}%</span>
                    </div>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="text-sm">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤</span>
                    <div className="flex items-center gap-2">
                      <div className="w-24 h-2 bg-muted rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-blue-500 transition-all duration-300"
                          style={{ width: `${Math.min(100, (performanceStats.avgResponseTime > 0 ? 3000 / performanceStats.avgResponseTime : 100))}%` }}
                        />
                      </div>
                      <span className="text-sm text-muted-foreground">
                        {performanceStats.avgResponseTime > 0 ? Math.min(100, Math.round(3000 / performanceStats.avgResponseTime)) : 0}%
                      </span>
                    </div>
                  </div>
                </div>

                {performanceStats.totalRequests > 0 && (
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ {performanceStats.totalRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞ {performanceStats.avgResponseTime}ms. 
                      –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {performanceStats.successRate}%.
                    </AlertDescription>
                  </Alert>
                )}

                {performanceStats.totalRequests === 0 && (
                  <Alert>
                    <Info className="h-4 w-4" />
                    <AlertDescription>
                      –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
                    </AlertDescription>
                  </Alert>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* –í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
        <TabsContent value="parameters" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sliders className="h-5 w-5" />
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="temperature">
                    Temperature ({settings.temperature})
                  </Label>
                  <Input
                    id="temperature"
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={settings.temperature}
                    onChange={(e) => handleInputChange('temperature', parseFloat(e.target.value))}
                    className="w-full"
                  />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span>0.0</span>
                    <span>–ë–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ</span>
                    <span>–ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ</span>
                    <span>1.0</span>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: 0.1-0.3
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="maxTokens">Max Tokens</Label>
                  <Input
                    id="maxTokens"
                    type="number"
                    min="100"
                    max="4000"
                    value={settings.maxTokens}
                    onChange={(e) => handleInputChange('maxTokens', parseInt(e.target.value))}
                  />
                  <p className="text-xs text-muted-foreground">
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö (100-4000)
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="topP">
                    Top P ({settings.topP})
                  </Label>
                  <Input
                    id="topP"
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={settings.topP}
                    onChange={(e) => handleInputChange('topP', parseFloat(e.target.value))}
                    className="w-full"
                  />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span>0.0</span>
                    <span>–ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ</span>
                    <span>–ë–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ</span>
                    <span>1.0</span>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ temperature –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
                  </p>
                </div>
              </div>

              <Separator />

              {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <div className="space-y-4">
                <h4 className="text-sm font-medium">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="p-4 border rounded-lg">
                    <h5 className="font-medium mb-2">–î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á</h5>
                    <div className="space-y-1 text-sm">
                      <div>Temperature: 0.1-0.3</div>
                      <div>Max Tokens: 1500-2000</div>
                      <div>Top P: 0.8-0.9</div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      className="mt-2"
                      onClick={() => {
                        handleInputChange('temperature', 0.2)
                        handleInputChange('maxTokens', 1800)
                        handleInputChange('topP', 0.85)
                      }}
                    >
                      –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                    </Button>
                  </div>
                  
                  <div className="p-4 border rounded-lg">
                    <h5 className="font-medium mb-2">–î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</h5>
                    <div className="space-y-1 text-sm">
                      <div>Temperature: 0.5-0.7</div>
                      <div>Max Tokens: 2000-3000</div>
                      <div>Top P: 0.9-1.0</div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      className="mt-2"
                      onClick={() => {
                        handleInputChange('temperature', 0.6)
                        handleInputChange('maxTokens', 2500)
                        handleInputChange('topP', 0.95)
                      }}
                    >
                      –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date(settings.updatedAt).toLocaleString('ru-RU')}</span>
            <span>ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {settings.id}</span>
          </div>
        </CardContent>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏ */}
      <Dialog open={!!selectedModel} onOpenChange={() => setSelectedModel(null)}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Cpu className="h-5 w-5" />
              –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
            </DialogTitle>
          </DialogHeader>
          
          {selectedModel && (
            <div className="space-y-6">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold mb-2">{selectedModel.id}</h3>
                  <p className="text-sm text-muted-foreground">{selectedModel.description || '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å'}</p>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–ê–≤—Ç–æ—Ä</Label>
                    <div className="text-sm">{selectedModel.owned_by}</div>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–°–æ–∑–¥–∞–Ω–∞</Label>
                    <div className="text-sm">{new Date(selectedModel.created * 1000).toLocaleDateString()}</div>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–†–∞–∑–º–µ—Ä</Label>
                    <div className="text-sm flex items-center gap-1">
                      <HardDrive className="h-3 w-3" />
                      {selectedModel.size || 'Unknown'}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–§–æ—Ä–º–∞—Ç</Label>
                    <div className="text-sm">{selectedModel.format || 'Unknown'}</div>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–°–µ–º–µ–π—Å—Ç–≤–æ</Label>
                    <div className="text-sm">{selectedModel.family || 'Unknown'}</div>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è</Label>
                    <div className="text-sm">{selectedModel.quantization || 'Unknown'}</div>
                  </div>
                </div>
              </div>

              <Separator />

              {/* –°—Ç–∞—Ç—É—Å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
              <div className="space-y-4">
                <h4 className="font-medium">–°—Ç–∞—Ç—É—Å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–ò–∑–±—Ä–∞–Ω–Ω–∞—è</Label>
                    <div className="text-sm flex items-center gap-1">
                      {selectedModel.is_favorite ? (
                        <>
                          <Star className="h-3 w-3 text-yellow-500 fill-current" />
                          <span>–î–∞</span>
                        </>
                      ) : (
                        <>
                          <Star className="h-3 w-3" />
                          <span>–ù–µ—Ç</span>
                        </>
                      )}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞</Label>
                    <div className="text-sm flex items-center gap-1">
                      {selectedModel.is_tested ? (
                        <>
                          <CheckCircle className={`h-3 w-3 ${selectedModel.test_result?.success ? 'text-green-500' : 'text-red-500'}`} />
                          <span>{selectedModel.test_result?.success ? '–£—Å–ø–µ—à–Ω–æ' : '–° –æ—à–∏–±–∫–∞–º–∏'}</span>
                        </>
                      ) : (
                        <>
                          <XCircle className="h-3 w-3 text-gray-500" />
                          <span>–ù–µ—Ç</span>
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {selectedModel.test_result && (
                  <div className="p-3 bg-muted rounded-lg space-y-2">
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="font-medium">–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</span> {selectedModel.test_result.response_time}ms
                      </div>
                      <div>
                        <span className="font-medium">–ö–∞—á–µ—Å—Ç–≤–æ:</span> {selectedModel.test_result.quality_score}/10
                      </div>
                    </div>
                    {selectedModel.test_result.notes && (
                      <div>
                        <span className="font-medium">–ó–∞–º–µ—Ç–∫–∏:</span> {selectedModel.test_result.notes}
                      </div>
                    )}
                  </div>
                )}
              </div>

              <Separator />

              {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
              <div className="space-y-4">
                <h4 className="font-medium">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
                <div className="grid grid-cols-1 gap-3">
                  <div className="p-3 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium text-sm">–î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á</span>
                      <Badge variant="outline" className="text-xs">–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è</Badge>
                    </div>
                    <div className="grid grid-cols-3 gap-2 text-xs text-muted-foreground">
                      <div>Temperature: 0.1-0.3</div>
                      <div>Max Tokens: 1500-2000</div>
                      <div>Top P: 0.8-0.9</div>
                    </div>
                  </div>
                  
                  <div className="p-3 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium text-sm">–î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</span>
                      <Badge variant="outline" className="text-xs">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</Badge>
                    </div>
                    <div className="grid grid-cols-3 gap-2 text-xs text-muted-foreground">
                      <div>Temperature: 0.5-0.7</div>
                      <div>Max Tokens: 2000-3000</div>
                      <div>Top P: 0.9-1.0</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="flex justify-between pt-4 border-t">
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => toggleFavoriteModel(selectedModel.id)}
                  >
                    {selectedModel.is_favorite ? (
                      <>
                        <Star className="h-4 w-4 mr-2 text-yellow-500 fill-current" />
                        –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                      </>
                    ) : (
                      <>
                        <Star className="h-4 w-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                      </>
                    )}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => testModel(selectedModel.id)}
                    disabled={testingModel === selectedModel.id}
                  >
                    {testingModel === selectedModel.id ? (
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    ) : (
                      <TestTube className="h-4 w-4 mr-2" />
                    )}
                    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
                <Button
                  onClick={() => {
                    handleInputChange('defaultModel', selectedModel.id)
                    setSelectedModel(null)
                  }}
                  disabled={settings?.defaultModel === selectedModel.id}
                >
                  {settings?.defaultModel === selectedModel.id ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–í—ã–±—Ä–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é'}
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}